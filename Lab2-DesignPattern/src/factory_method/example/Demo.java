package factory_method.example;

import factory_method.example.factory.Dialog;
import factory_method.example.factory.HtmlDialog;
import factory_method.example.factory.WindowsDialog;

/**
 * EN: Demo class. Everything comes together here.
 *
 * RU: –î–µ–º–æ-–∫–ª–∞—?—?. –ó–¥–µ—?—å –≤—?—ë —?–≤–æ–¥–∏—Ç—?—? –≤–æ–µ–¥–∏–Ω–æ.
 */
public class Demo {
    private static Dialog dialog;

    public static void main(String[] args) {
        configure();
        runBusinessLogic();
    }

    /**
     * EN: The concrete factory is usually chosen depending on configuration or
     * environment options.
     *
     * RU: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —?–æ–∑–¥–∞—ë—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É –≤ –∑–∞–≤–∏—?–∏–º–æ—?—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * –∏–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—?.
     */
    static void configure() {
        if (System.getProperty("os.name").equals("Windows 10")) {
            dialog = new WindowsDialog();
        } else {
            dialog = new HtmlDialog();
        }
    }

    /**
     * EN: All of the client code should work with factories and products
     * through abstract interfaces. This way it does not care which factory it
     * works with and what kind of product it returns.
     *
     * RU: –í–µ—?—å –æ—?—Ç–∞–ª—å–Ω–æ–π –∫–ª–∏–µ–Ω—Ç—?–∫–∏–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —? —Ñ–∞–±—Ä–∏–∫–æ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ —Ç–æ–ª—å–∫–æ
     * —á–µ—Ä–µ–∑ –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—?, –ø–æ—?—Ç–æ–º—É –¥–ª—? –Ω–µ–≥–æ –Ω–µ–≤–∞–∂–Ω–æ –∫–∞–∫–∞—? —Ñ–∞–±—Ä–∏–∫–∞ –±—ã–ª–∞
     * —?–æ–∑–¥–∞–Ω–∞.
     */
    static void runBusinessLogic() {
        dialog.renderWindow();
    }
}
