package factory_method.example.factory;

import factory_method.example.buttons.Button;

/**
 * EN: Base factory class. Note that "factory" is merely a role for the class.
 * It should have some core business logic which needs different products to be
 * created.
 *
 * RU: –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—?—? —Ñ–∞–±—Ä–∏–∫–∏. –ó–∞–º–µ—Ç—å—Ç–µ, —á—Ç–æ "—Ñ–∞–±—Ä–∏–∫–∞" ‚Äì —?—Ç–æ –≤—?–µ–≥–æ –ª–∏—à—å
 * –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—? —Ä–æ–ª—å –¥–ª—? –∫–ª–∞—?—?–∞. –û–Ω —É–∂–µ –∏–º–µ–µ—Ç –∫–∞–∫—É—é-—Ç–æ –±–∏–∑–Ω–µ—?-–ª–æ–≥–∏–∫—É, –≤
 * –∫–æ—Ç–æ—Ä–æ–π —Ç—Ä–µ–±—É–µ—Ç—?—? —?–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
 */
public abstract class Dialog {

    public void renderWindow() {
        // EN: ... other code ...
        //
        // RU: ... –æ—?—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–∏–∞–ª–æ–≥–∞ ...

        Button okButton = createButton();
        okButton.render();
    }

    /**
     * EN: Subclasses will override this method in order to create specific
     * button objects.
     *
     * RU: –ü–æ–¥–∫–ª–∞—?—?—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—?—Ç—å —?—Ç–æ—Ç –º–µ—Ç–æ–¥, —á—Ç–æ–±—ã —?–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ
     * –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Ä–∞–∑–Ω—ã–µ –¥–ª—? –∫–∞–∂–¥–æ–π —Ñ–∞–±—Ä–∏–∫–∏.
     */
    public abstract Button createButton();
}
